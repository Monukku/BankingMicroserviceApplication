That sounds like a solid setup! You're using Spring Cloud Config to store configurations
in GitHub and want dynamic refresh across microservices when changes are made.

Here are the key steps to ensure dynamic refresh works smoothly:

### **1. Enable Spring Cloud Bus (for broadcasting refresh)**
In your microservices, include the Spring Cloud Bus dependency in `pom.xml`:
```xml
<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-bus-amqp</artifactId>
</dependency>
```
or (for Kafka users):
```xml
<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-bus-kafka</artifactId>
</dependency>
```

### **2. Expose Actuator Endpoints**
In `application.properties` or `application.yml`:
```properties
management.endpoints.web.exposure.include=refresh, bus-refresh
```

### **3. Config Server Webhook (GitHub â†’ Spring Cloud Config)**
When you update the config in GitHub, trigger `/actuator/busrefresh` on the Config Server:
- You can use GitHub Webhooks to send a POST request to:
  ```
  http://<CONFIG_SERVER_HOST>:<PORT>/actuator/busrefresh
  ```
- Alternatively, manually trigger it using Postman:
  ```
  POST http://localhost:8080/actuator/busrefresh
  ```

### **4. Ensure Config Clients Have `@RefreshScope`**
Microservices using external configs should include:
```java
@RefreshScope
@RestController
public class MyController {
    @Value("${my.config.value}")
    private String myConfig;

    @GetMapping("/config")
    public String getConfigValue() {
        return myConfig;
    }
}
```
This ensures properties refresh dynamically when `/actuator/refresh` or `/actuator/busrefresh` is called.

### **Troubleshooting Your Issue (`ECONNREFUSED`)**
If `http://localhost:8080/actuator/busrefresh` is failing:
- Ensure **Config Server is running** (`mvn spring-boot:run`).
- Check **RabbitMQ/Kafka** is up if using Spring Cloud Bus.
- Verify **server port** in `application.yml`.
- Make sure the **service is listening on `localhost:8080`**.
- Look at logs for **startup errors**.

Let me know where you're stuck, and I can help debug! ðŸš€

#### **1. Use `POST` Instead of `GET`**
`/actuator/busrefresh` only supports `POST`, not `GET`. Try this:
```bash
curl -X POST http://localhost:8080/actuator/busrefresh
```
Or in Postman, change the method to **POST**.

#### **2. Enable `bus-refresh` in `application.properties`**
Make sure your `application.properties` (or `application.yml`) has properties like this:
management.endpoints.web.exposure.include=refresh, bus-refresh

If it's missing `bus-refresh`, the endpoint may not be enabled.

#### **3. Check If Spring Cloud Bus Is Included**
Make sure your **Config Server** and **clients** have:
```xml
<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-bus-amqp</artifactId>
</dependency>
```
or (for Kafka users):
```xml
<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-bus-kafka</artifactId>
</dependency>
```
